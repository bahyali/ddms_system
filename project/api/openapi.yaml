openapi: '3.0.3'
info:
  title: 'Dynamic Data Management System API'
  description: 'API for managing dynamic entities, fields, records, and relationships.'
  version: '1.0.0'
servers:
  - url: '/api/v1'
    description: 'API v1'

tags:
  - name: Metadata
    description: 'Operations for managing Entity Types and Field Definitions.'
  - name: Records
    description: 'Operations for managing Records (instances of an Entity Type).'
  - name: Relations
    description: 'Operations for managing relationships (edges) between Records.'
  - name: Real-time
    description: 'Operations for real-time event streaming.'
  - name: Operations
    description: 'Operational endpoints for background jobs and maintenance.'
  - name: Audit
    description: 'Audit trails and activity events.'

paths:
  /entity-types:
    get:
      tags:
        - Metadata
      summary: 'List Entity Types'
      description: 'Retrieves a list of all entity types for the tenant.'
      operationId: 'listEntityTypes'
      responses:
        '200':
          description: 'A list of entity types.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityType'
    post:
      tags:
        - Metadata
      summary: 'Create Entity Type'
      description: 'Creates a new entity type.'
      operationId: 'createEntityType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreate'
      responses:
        '201':
          description: 'Entity type created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityType'
        '400':
          $ref: '#/components/responses/BadRequest'

  /entity-types/{entityTypeId}:
    patch:
      tags:
        - Metadata
      summary: 'Update Entity Type'
      description: 'Updates an existing entity type.'
      operationId: 'updateEntityType'
      parameters:
        - $ref: '#/components/parameters/entityTypeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityTypeUpdate'
      responses:
        '200':
          description: 'Entity type updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /entity-types/{entityTypeId}/fields:
    get:
      tags:
        - Metadata
      summary: 'List Field Definitions'
      description: 'Retrieves a list of all field definitions for a given entity type.'
      operationId: 'listFieldDefs'
      parameters:
        - $ref: '#/components/parameters/entityTypeId'
      responses:
        '200':
          description: 'A list of field definitions.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldDef'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Metadata
      summary: 'Create Field Definition'
      description: 'Creates a new field definition for an entity type.'
      operationId: 'createFieldDef'
      parameters:
        - $ref: '#/components/parameters/entityTypeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldDefCreate'
      responses:
        '201':
          description: 'Field definition created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldDef'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /entities/{entityTypeKey}:
    post:
      tags:
        - Records
      summary: 'Create Record'
      description: 'Creates a new record for a given entity type.'
      operationId: 'createRecord'
      parameters:
        - $ref: '#/components/parameters/entityTypeKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordCreate'
      responses:
        '201':
          description: 'Record created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /entities/{entityTypeKey}/search:
    post:
      tags:
        - Records
      summary: 'Search Records'
      description: 'Searches for records of a given entity type using a filter.'
      operationId: 'searchRecords'
      parameters:
        - $ref: '#/components/parameters/entityTypeKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: 'A list of matching records.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /entities/{entityTypeKey}/{recordId}:
    get:
      tags:
        - Records
      summary: 'Get Record by ID'
      description: 'Retrieves a single record by its ID.'
      operationId: 'getRecord'
      parameters:
        - $ref: '#/components/parameters/entityTypeKey'
        - $ref: '#/components/parameters/recordId'
      responses:
        '200':
          description: 'The requested record.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Records
      summary: 'Update Record'
      description: 'Updates an existing record. Uses optimistic locking via a version number.'
      operationId: 'updateRecord'
      parameters:
        - $ref: '#/components/parameters/entityTypeKey'
        - $ref: '#/components/parameters/recordId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordUpdate'
      responses:
        '200':
          description: 'Record updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /fields/{fieldId}:
    patch:
      tags:
        - Metadata
      summary: 'Update Field Definition'
      description: 'Updates an existing field definition.'
      operationId: 'updateFieldDef'
      parameters:
        - $ref: '#/components/parameters/fieldId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldDefUpdate'
      responses:
        '200':
          description: 'Field definition updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldDef'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /relations:
    post:
      tags:
        - Relations
      summary: 'Create Relation'
      description: 'Creates a new relationship (edge) between two records.'
      operationId: 'createRelation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationCreate'
      responses:
        '201':
          description: 'Relation created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - Relations
      summary: 'List Relations'
      description: 'Retrieves relations for a record, optionally filtered by field and direction.'
      operationId: 'listRelations'
      parameters:
        - name: record_id
          in: query
          required: true
          description: 'The record to use when searching for relations.'
          schema:
            type: string
            format: uuid
        - name: role
          in: query
          required: false
          description: 'Whether to return relations where the record is the source (`from`) or target (`to`).'
          schema:
            type: string
            enum: [from, to]
            default: from
        - name: field_id
          in: query
          required: false
          description: 'If provided, limits results to a specific relation field.'
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'A list of relations.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationWithContext'
        '400':
          $ref: '#/components/responses/BadRequest'

  /relations/{relationId}:
    delete:
      tags:
        - Relations
      summary: 'Delete Relation'
      description: 'Deletes an existing relationship (edge).'
      operationId: 'deleteRelation'
      parameters:
        - $ref: '#/components/parameters/relationId'
      responses:
        '204':
          description: 'Relation deleted successfully.'
        '404':
          $ref: '#/components/responses/NotFound'

  /indexes:
    get:
      tags:
        - Operations
      summary: 'List Field Index Jobs'
      description: 'Retrieves the status of field indexing jobs for the current tenant.'
      operationId: 'listFieldIndexes'
      responses:
        '200':
          description: 'A list of field index jobs.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldIndexJob'

  /events:
    get:
      tags:
        - Real-time
      summary: 'Subscribe to real-time events'
      description: 'Establishes a Server-Sent Events (SSE) connection to receive real-time updates for the current tenant.'
      operationId: 'subscribeToEvents'
      responses:
        '200':
          description: 'SSE connection established.'
          content:
            text/event-stream: {}

  /audit/activity-log:
    get:
      tags:
        - Audit
      summary: 'List Activity Events'
      description: 'Returns recent audit log events for the tenant, ordered with the latest first.'
      operationId: 'listActivityLog'
      parameters:
        - in: query
          name: limit
          description: 'Maximum number of events to return.'
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          description: 'Cursor for pagination, representing the last event identifier.'
          schema:
            type: string
        - in: query
          name: type
          description: 'Filter events by category.'
          schema:
            $ref: '#/components/schemas/ActivityCategory'
        - in: query
          name: search
          description: 'Search across action, resource, actor, and metadata.'
          schema:
            type: string
            maxLength: 200
      responses:
        '200':
          description: 'A list of activity events.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLogResponse'

components:
  parameters:
    entityTypeId:
      name: entityTypeId
      in: path
      required: true
      description: 'The ID of the entity type.'
      schema:
        type: string
        format: uuid
    entityTypeKey:
      name: entityTypeKey
      in: path
      required: true
      description: 'The unique machine-readable key for the entity type (e.g., "user", "project").'
      schema:
        type: string
    recordId:
      name: recordId
      in: path
      required: true
      description: 'The ID of the record.'
      schema:
        type: string
        format: uuid
    fieldId:
      name: fieldId
      in: path
      required: true
      description: 'The ID of the field definition.'
      schema:
        type: string
        format: uuid
    relationId:
      name: relationId
      in: path
      required: true
      description: 'The ID of the relation (edge).'
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: 'Bad Request - The request body is invalid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: 'Not Found - The requested resource does not exist.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: 'Conflict - The request could not be completed due to a conflict with the current state of the resource, likely an optimistic locking failure.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # Entity Type Schemas
    EntityType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        key:
          type: string
          description: 'A unique machine-readable key for the entity type (e.g., "user", "project").'
        label:
          type: string
          description: 'A human-readable label for the entity type (e.g., "User", "Project").'
        description:
          type: string
          nullable: true
          description: 'A description of the entity type.'
      required:
        - id
        - key
        - label

    EntityTypeCreate:
      type: object
      properties:
        key:
          type: string
          description: 'A unique machine-readable key for the entity type (e.g., "user", "project").'
        label:
          type: string
          description: 'A human-readable label for the entity type (e.g., "User", "Project").'
        description:
          type: string
          nullable: true
          description: 'A description of the entity type.'
      required:
        - key
        - label

    EntityTypeUpdate:
      type: object
      properties:
        label:
          type: string
          description: 'A human-readable label for the entity type (e.g., "User", "Project").'
        description:
          type: string
          nullable: true
          description: 'A description of the entity type.'

    # Field Definition Schemas
    FieldDef:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        entityTypeId:
          type: string
          format: uuid
          readOnly: true
        key:
          type: string
          description: 'A unique machine-readable key for the field (e.g., "status", "budget").'
        label:
          type: string
          description: 'A human-readable label for the field (e.g., "Status", "Budget").'
        kind:
          type: string
          enum: [text, number, date, select, relation, boolean]
        required:
          type: boolean
          default: false
        uniqueWithinType:
          type: boolean
          default: false
        searchable:
          type: boolean
          default: true
        indexed:
          type: boolean
          default: false
        options:
          $ref: '#/components/schemas/FieldDefOptions'
        validate:
          $ref: '#/components/schemas/FieldDefValidate'
        acl:
          $ref: '#/components/schemas/FieldDefAcl'
        position:
          type: integer
          default: 0
        active:
          type: boolean
          default: true
      required:
        - id
        - entityTypeId
        - key
        - label
        - kind

    FieldDefCreate:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        kind:
          type: string
          enum: [text, number, date, select, relation, boolean]
        required:
          type: boolean
        uniqueWithinType:
          type: boolean
        searchable:
          type: boolean
        indexed:
          type: boolean
        options:
          $ref: '#/components/schemas/FieldDefOptions'
        validate:
          $ref: '#/components/schemas/FieldDefValidate'
        acl:
          $ref: '#/components/schemas/FieldDefAcl'
        position:
          type: integer
      required:
        - key
        - label
        - kind

    FieldDefUpdate:
      type: object
      properties:
        label:
          type: string
        required:
          type: boolean
        uniqueWithinType:
          type: boolean
        searchable:
          type: boolean
        indexed:
          type: boolean
        options:
          $ref: '#/components/schemas/FieldDefOptions'
        validate:
          $ref: '#/components/schemas/FieldDefValidate'
        acl:
          $ref: '#/components/schemas/FieldDefAcl'
        position:
          type: integer
        active:
          type: boolean

    FieldDefOptions:
      type: object
      properties:
        enum:
          type: array
          items:
            type: string
          description: 'For kind="select". A list of possible values.'
        multiselect:
          type: boolean
          description: 'For kind="select". Whether multiple values can be selected.'
        relation:
          type: object
          description: 'For kind="relation". Defines the relationship target.'
          properties:
            targetEntityTypeId:
              type: string
              format: uuid
            cardinality:
              type: string
              enum: [one, many]
          required:
            - targetEntityTypeId
            - cardinality
        formula:
          type: string
          description: 'For computed fields. An expression to calculate the field value.'
          example: 'price * qty'
        visibleIf:
          type: array
          items:
            type: object
          description: 'Conditional visibility rules for the UI.'
        requiredIf:
          type: array
          items:
            type: object
          description: 'Conditional requirement rules.'

    FieldDefValidate:
      type: object
      description: 'Validation rules that depend on the field kind.'
      properties:
        text:
          type: object
          properties:
            minLen:
              type: integer
            maxLen:
              type: integer
            regex:
              type: string
        number:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
            integer:
              type: boolean
        date:
          type: object
          properties:
            min:
              type: string
              format: date
            max:
              type: string
              format: date

    FieldDefAcl:
      type: object
      description: 'Access control list defining roles for read/write access.'
      properties:
        read:
          type: array
          items:
            type: string
        write:
          type: array
          items:
            type: string

    # Record Schemas
    Record:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        entityTypeId:
          type: string
          format: uuid
          readOnly: true
        version:
          type: integer
          description: 'The version number of the record, used for optimistic locking.'
          readOnly: true
        data:
          type: object
          additionalProperties: true
          description: 'A JSON object containing the custom field data for the record.'
          example:
            name: 'AI Roadmap Q4'
            status: 'Active'
            budget: 12000
        createdBy:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        updatedBy:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - entityTypeId
        - version
        - data
        - createdAt
        - updatedAt

    RecordCreate:
      type: object
      properties:
        data:
          type: object
          additionalProperties: true
          description: 'A JSON object containing the custom field data for the new record.'
      required:
        - data

    RecordUpdate:
      type: object
      properties:
        data:
          type: object
          additionalProperties: true
          description: 'A JSON object containing the fields to update.'
        version:
          type: integer
          description: 'The current version of the record being updated, for optimistic locking.'
      required:
        - data
        - version

    ActivityCategory:
      type: string
      enum:
        - schema
        - record
        - governance
        - import
        - integration

    AuditLogEvent:
      type: object
      properties:
        id:
          type: integer
        occurredAt:
          type: string
          format: date-time
        action:
          type: string
        category:
          $ref: '#/components/schemas/ActivityCategory'
        actorId:
          type: string
          nullable: true
        actorLabel:
          type: string
          nullable: true
        resourceType:
          type: string
        resourceId:
          type: string
          nullable: true
        meta:
          type: object
          additionalProperties: true
      required:
        - id
        - occurredAt
        - action
        - category
        - resourceType
        - meta

    ActivityLogSummary:
      type: object
      properties:
        totalEvents:
          type: integer
        schemaEdits:
          type: integer
        recordUpdates:
          type: integer
        uniqueActors:
          type: integer
        lastEventAt:
          type: string
          format: date-time
          nullable: true
      required:
        - totalEvents
        - schemaEdits
        - recordUpdates
        - uniqueActors
        - lastEventAt

    ActivityLogResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEvent'
        summary:
          $ref: '#/components/schemas/ActivityLogSummary'
      required:
        - events
        - summary

    # Relation Schemas
    Relation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        field_id:
          type: string
          format: uuid
          description: 'The ID of the relation field definition.'
        from_record_id:
          type: string
          format: uuid
          description: 'The ID of the source record in the relation.'
        to_record_id:
          type: string
          format: uuid
          description: 'The ID of the target record in the relation.'
        createdBy:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - field_id
        - from_record_id
        - to_record_id
        - createdAt

    RelationWithContext:
      allOf:
        - $ref: '#/components/schemas/Relation'
        - type: object
          properties:
            direction:
              type: string
              enum: [from, to]
            field:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                key:
                  type: string
                label:
                  type: string
                entityTypeId:
                  type: string
                  format: uuid
                targetEntityTypeId:
                  type: string
                  format: uuid
                  nullable: true
                cardinality:
                  type: string
                  enum: [one, many]
                  nullable: true
              required:
                - id
                - key
                - label
                - entityTypeId
            relatedRecord:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                entityTypeId:
                  type: string
                  format: uuid
                label:
                  type: string
                  nullable: true
              required:
                - id
                - entityTypeId

    RelationCreate:
      type: object
      properties:
        field_id:
          type: string
          format: uuid
          description: 'The ID of the relation field definition.'
        from_record_id:
          type: string
          format: uuid
          description: 'The ID of the source record in the relation.'
        to_record_id:
          type: string
          format: uuid
          description: 'The ID of the target record in the relation.'
      required:
        - field_id
        - from_record_id
        - to_record_id

    # Operations Schemas
    FieldIndexJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fieldId:
          type: string
          format: uuid
        entityTypeId:
          type: string
          format: uuid
        indexName:
          type: string
        status:
          type: string
          enum: [pending, in_progress, ready, failed]
        attempts:
          type: integer
        lastError:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
          nullable: true
        completedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fieldKey:
          type: string
        fieldLabel:
          type: string
      required:
        - id
        - fieldId
        - entityTypeId
        - indexName
        - status
        - attempts
        - createdAt
        - updatedAt
        - fieldKey
        - fieldLabel

    # Search Schemas
    SearchRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/Sort'
          description: 'An array of sort objects to apply to the results.'
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
          description: 'The maximum number of records to return.'
        cursor:
          type: string
          nullable: true
          description: 'A cursor for pagination, obtained from a previous search response.'

    SearchResponse:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Record'
        nextCursor:
          type: string
          nullable: true
          description: 'A cursor to retrieve the next page of results. Null if there are no more results.'
        total:
          type: integer
          description: 'The total number of records matching the filter.'
      required:
        - rows
        - total

    Sort:
      type: object
      properties:
        field:
          type: string
          description: 'The key of the field to sort by (e.g., "budget", "createdAt").'
        dir:
          type: string
          enum: [asc, desc]
          default: asc
      required:
        - field

    Filter:
      type: object
      description: |
        A flexible filter object to query records. It can be a logical operator (`and`, `or`, `not`) or a field-level comparison.
        See the manifest for the full grammar.
      properties:
        op:
          type: string
          description: 'The operator for the filter.'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
          description: 'Used with logical operators `and` and `or`.'
        field:
          type: string
          description: 'The key of the field to compare.'
        value:
          description: 'The value to compare against.'
        values:
          type: array
          description: 'An array of values for the `in` operator.'
        query:
          type: string
          description: 'The search query for `fulltext` search.'
      example:
        op: 'and'
        filters:
          - { op: 'eq', field: 'status', value: 'Active' }
          - { op: 'gte', field: 'budget', value: 10000 }
          - { op: 'fulltext', query: 'ai roadmap' }

    # Error Schema
    Error:
      type: object
      properties:
        code:
          type: string
          description: 'A machine-readable error code.'
          example: 'VALIDATION_ERROR'
        message:
          type: string
          description: 'A human-readable error message.'
          example: 'The request body is invalid.'
        requestId:
          type: string
          format: uuid
          description: 'A unique identifier for the request, useful for tracing.'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationErrorDetail'
      required:
        - code
        - message

    ValidationErrorDetail:
      type: object
      properties:
        path:
          type: string
          description: 'The path to the invalid field in the request body.'
          example: 'budget'
        code:
          type: string
          description: 'A machine-readable code for the specific validation error.'
          example: 'too_small'
        message:
          type: string
          description: 'A human-readable message for the specific validation error.'
          example: 'The budget must be at least 0.'
      required:
        - path
        - code
        - message
